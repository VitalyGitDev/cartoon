<?php/******************************************************************************* * * * ***///------------------------------------------------------------------------------// Я ХЗ зачем это ...function ErrorHandler($errno, $errstr, $errfile, $errline) {    if ( E_RECOVERABLE_ERROR===$errno ) {        return true; }    return false;}set_error_handler('ErrorHandler');//==============================================================================function lib_check_proces() {   $out = array();   exec ('/bin/ps -e aux | grep "/usr/bin/php /var/www/vm.ua/exec/import/ax_sync_full.php"',$out);   if (count($out)>4) { // Если процес уже запущен, завершаемся...      //echo "\n\nUze - ". date('Y.m.d H:i:s') ."\n";      //print_r($out);      EXIT();   } else {      echo "СТАРТ - ". date('Y.m.d H:i:s') ."\n";   }}function lib_get_tasks() {   global $db;   $tasks = array();   $q = $db->exquery("select * from `axapta_tasks` WHERE `status`=0 order by `date` ");   while($r = $q->nextAssoc()) {       $tasks[] = $r; //substr(string string, int start, [int length])   }   return $tasks;}function lib_parse_task($t) {   $out = array();   $t = explode(' ', $t);   $out['task'] = $t[0];   if (isSet($t[1]) && !empty($t[1])) {	   $out['params'] = explode('###', $t[1]);	}	return $out;}//-----------------------VIT ADDON/*function lib_check_update_list(&$db,&$data) {        //$goods_list = $db->exquery("select * from articles where axapta_code<>'' ");    $db->query("update articles set axapta_updated=0 where axapta_code<>''");        foreach($data as $ax_code => $item) {                            $avail=$item['avail'];             $db->query("update articles set axapta_updated=1, avail={$avail} where axapta_code='{$ax_code}'");               }        if (!empty($goods_list)) {        while($val=$goods_list->nextAssoc()) {            $checker=0;            $avail=0;                        foreach($data as $ax_code => $item) {                if ($ax_code == $val['axapta_code']) {                    $checker=1;  $avail=$item['avail'];                }            }            if ($checker==0) {                $db->query("update articles set approved=0, axapta_updated=0 where axapta_code='".$val['axapta_code']."' ");            } else {                 $db->query("update articles set approved=1, axapta_updated=1 where axapta_code='".$val['axapta_code']."' ");                        }        }    }                    //return $absnum;} *///-----------------------END OF ADDONfunction uc_letter($str, $enc = 'utf-8') {     return mb_strtoupper(mb_substr($str, 0, 1, $enc), $enc).mb_substr($str, 1, mb_strlen($str, $enc), $enc); }function lib_get_articles(&$db) {    $absnums = array();    $q = $db->exquery("select absnum,axapta_code from articles where axapta_code<>''");    while($r = $q->nextAssoc()) {        $absnums[$r['axapta_code']] = $r['absnum'];    }    return $absnums;}function lib_mark_for_update(&$db, $numsup) {   $db->query("update pages set axapta_updated=0 where numsup={$numsup}");}function lib_disable_not_update(&$db) {   $db->query("update pages set approved=0 where axapta_updated=0");}function lib_create_page($numsup,$axapta_code,$name) {    global $db, $allpages;        $absnum = $db->nextid('pages');    $alias = prepare_alias($name, $absnum);    $name = mysql_real_escape_string($name);    $pos = $db->qsingle("select max(position) as pos from pages where numsup='".$numsup."'");    $pos++;    for($i=1;$i<=3;$i++) {      $db->query("          insert into pages           set absnum='".$absnum."',              name='".$name."',              alias='".$alias."',              langid='".$i."',              position='".$pos."',              numsup='".$numsup."',              approved='1',              axapta_code='".$axapta_code."'      ");    }    $db->query("update pages set cnt=cnt+1 where absnum='".$numsup."'");    $this_absnum = $absnum;    $numsup = $absnum;    $level  = 0;        do {        $absnum = $numsup;        $numsup = $allpages->all($absnum)->numsup;        if ($numsup!='') {            $check = $db->qSingle("select absnum from pages_desc where absnum='".$this_absnum."' and numsup='".$numsup."'");            if (!$check) {                $db->query('INSERT INTO pages_desc (absnum, numsup, level) VALUES ('.$this_absnum.', '.$numsup.', '.$level.')');                  }        }        $level++;    } while ($numsup);        return $this_absnum;}function lib_update_page(&$db,&$axapta,&$parent_absnum,&$axapta_code,&$name) {   $absnum = $db->qsingle("select absnum from pages where axapta_code={code} limit 1", array('code'=>$axapta_code));           if (empty($absnum)) {      $absnum = lib_create_page($parent_absnum,$axapta_code,$name); }   foreach ($axapta->pages_names[$axapta_code] as $lang_key => $val) {      $lang_id = $axapta->langs_list[$lang_key];      if ($val) {         $db->query("update pages set name='".mysql_real_escape_string($val)."', axapta_updated=1 where absnum='".$absnum."' and langid='".$lang_id."' limit 1"); }   }   return $absnum;}function lib_update_props(&$db,&$axapta,&$setup,&$attrs,&$values,&$page_absnum,&$id) {   $props_types = array();      if (!empty($setup[$id])) {                   foreach($setup[$id] as $a) {                    $prop_id = $a['aid'];                    $props_types[$a['aid']] = array(                        'filter' => $a['filter'],                        'attribute' => $a['attribute']                    );                    //echo "- <b>".$attrs[$prop_id]."</b> (".$prop_id.")\n";                    if ($attrs[$prop_id]) {                        $check = $db->qsingle("select prop_id from axapta_props_names where prop_id={prop} and name={name} and langid='1'",array('prop'=>$prop_id, 'name'=>$attrs[$prop_id]));                        if (empty($check)) {                            //$db->query("replace into axapta_props_names set prop_id={prop}, name={name}, langid='1'",array('prop'=>$prop_id, 'name'=>$attrs[$prop_id]));                            $db->query("INSERT INTO `axapta_props_names` set prop_id={prop}, name={name}, langid=1 ON DUPLICATE KEY UPDATE name={name}",array('prop'=>$prop_id, 'name'=>$attrs[$prop_id]));                        }                        foreach ($axapta->attr_names[$prop_id] as $lang_key => $val) {                            $lang_id = $axapta->langs_list[$lang_key];                            if ($val) {                                $check = $db->qsingle("select prop_id from axapta_props_names where prop_id={prop} and name={name} and langid='".$lang_id."'",array('prop'=>$prop_id, 'name'=>$val));                                if (empty($check)) {                                    //$db->query("replace into axapta_props_names set prop_id={prop}, name={name}, langid='".$lang_id."'",array('prop'=>$prop_id, 'name'=>$val));                                    $db->query("INSERT INTO `axapta_props_names` set prop_id={prop}, name={name}, langid={langid} ON DUPLICATE KEY UPDATE name={name}",array('prop'=>$prop_id, 'name'=>$val,'langid'=>$lang_id));                                }                                //echo "$lang_id == $val\n";                            }                        }                        }                    foreach($a['values'] as $valId) {                        $db->query("replace into axapta_indexes set absnum={absnum}, prop_id={prop}, value_id={val}",array('absnum'=>$page_absnum, 'val'=>$valId, 'prop'=>$prop_id));                        //$db->query("INSERT INTO `axapta_indexes` set absnum={absnum}, prop_id={prop}, value_id={val} ON DUPLICATE KEY UPDATE value_id={val}",array('absnum'=>$page_absnum, 'val'=>$valId, 'prop'=>$prop_id));                        if ($values[$valId]) {                            //$db->query("replace into axapta_values_names set value_id={val}, name={name}, langid='1'",array('val'=>$valId, 'name'=>$values[$valId])); //, 'uri'=>SEO_cyr2lat()                            //$db->query("UPDATE `axapta_values_names` SET `uri`=concat(`id`,{uri}) WHERE `value_id`={val} AND `langid`=1",array('uri'=>SEO_cyr2lat($values[$valId]),'val'=>$valId));                            $db->query("INSERT INTO `axapta_values_names` set value_id={val}, name={name}, langid=1 ON DUPLICATE KEY UPDATE name={name}",array('val'=>$valId, 'name'=>$values[$valId]));                                                        foreach ($axapta->values_names[$valId] as $lang_key => $val) {                                $lang_id = $axapta->langs_list[$lang_key];                                if ($val) {                                    //$db->query("replace into axapta_values_names set value_id={val}, name={name}, langid='".$lang_id."'",array('val'=>$valId, 'name'=>$val));                                    $db->query("INSERT INTO `axapta_values_names` set value_id={val}, name={name}, langid={langid} ON DUPLICATE KEY UPDATE name={name}",array('val'=>$valId, 'name'=>$val,'langid'=>$lang_id));                                }                            }                        }                    }                }   }   return $props_types;}function lib_update_wait_list(&$db,&$db_item,&$d,&$absnum) {                if (!$db_item['avail'] && $d['avail']) {                      $q_tmp_wl = $db->exquery("select wl.*, u.email, u.firstname, u.lastname from users_waitlist wl, users u where  wl.product_id='$absnum' AND u.absnum=wl.user_id");                      while($r_tmp_wl = $q_tmp_wl->nextAssoc()) {                         //                            $sms_absnum = $db->nextid("axapta_sms");                            $db->query("insert into axapta_sms set absnum={sms_absnum}, message={msg}, product_id='0', user_id={userid}", array(                                'sms_absnum' => $sms_absnum,                                'msg'        => 'Ожидаемый Вами товар доступен в личном кабинете www.patronservice.ua',                                'userid'     => $r_tmp_wl['user_id']                            ));                         //                         sendMailWL( array('name'=>$r_tmp_wl['firstname'] .' '.$r_tmp_wl['lastname'],'email'=>$r_tmp_wl['email'],'produkt'=>$db_item['title']) );                         //echo "\n". $r_tmp_wl['email'] .' '. $absnum ."[$sms_absnum] Ожидаемый Вами товар доступен -- \n";                      }                      unset($q_tmp_wl);					 } // ----------------------------------------------------------- NIK [END] */}function lib_update_article(&$db,&$axapta,&$absnums,&$page_absnum,&$axapta_code,&$ax_item,&$d,$absnum) {                    if (empty($absnum)) {                        $absnum = create_article($page_absnum,$ax_item['title'],$ax_item['header'],$axapta_code,$d['avail'],$d['brand'],$d['adate'],$ax_item['alias'],1,$d['article']);                        $absnums[$axapta_code] = $absnum;                    } else {                        $db->query("update `articles` set `title`='".$ax_item['title']."', axapta_updated=1, `avail`='".$d['avail']."', `axapta_article`='".$d['article']."', `adate`='".$d['adate']."', `asort`='".$d['asort']."', `axapta_alias`='".$ax_item['alias']."' where `absnum`='".$absnum."'");                    }                    foreach ($axapta->item_names[$axapta_code] as $lang_key => $val) {                        $lang_id = $axapta->langs_list[$lang_key];                        if ($val['title']) {                            $db->query("update articles set axapta_updated=1, title='".mysql_real_escape_string($val['title'])."',header='".mysql_real_escape_string($val['header'])."' where absnum='".$absnum."' and langid='".$lang_id."' limit 1");                        }                    }    return $absnum;}function lib_update_compability(&$db,&$axapta,&$absnums,&$c,$absnum) {    if (!empty($c)) {        //*  */ print_r($c);                            foreach($c as $p) {                            if ($p['connection_type']=='/C' ||                                $p['connection_type']=='/CIR' ||                                $p['connection_type']=='/CISS' ||                                $p['connection_type']=='/INK' ||                                $p['connection_type']=='/P' ||                                $p['connection_type']=='/INK (rec)' ||                                $p['connection_type']=='/INK(rec)' ||                                $p['connection_type']=='/T') {                                $child_absnum = $absnums[$p['child']];                                if (empty($child_absnum)) {                                    //* */ echo "\n## Create Child [{$p[child]}] \n";                                    $child_data   = $axapta->getItem($p['child']);                                    $child_absnum = create_article(3694,$child_data['title'],$child_data['header'],$p['child'],0,'',time(),$child_data['alias'],0,null);                                    $absnums[$p['child']] = $child_absnum;                                } else {                                    //$db->query("update articles set title='".$child_data['title']."',axapta_alias='".$child_data['alias']."' where absnum='".$child_absnum."'");                                }                                //*  */ $lt = microtime(1);                                $db->query("replace into axapta_compability set absnum={absnum}, child_absnum={chld}, connection_type={c},direct=1", array('absnum'=>$absnum, 'chld'=>$child_absnum, 'c'=>$p['connection_type']));                                $db->query("replace into axapta_compability set absnum={absnum}, child_absnum={chld}, connection_type={c},direct=0", array('absnum'=>$child_absnum, 'chld'=>$absnum, 'c'=>$p['connection_type']));                                //*  */ echo " replace  ".round(microtime(1)-$lt,3)." sec\n"; $lt = microtime(1);                            }                        }    }}function lib_update_related_product(&$db,&$rel,&$absnums,$absnum) {                        $db->query("delete from axapta_related where absnum='".$absnum."'");                        if (!empty($rel)) {                            foreach($rel as $rl_code)  {                                $rel_absnum = $absnums[$rl_code];                                if (!empty($rel_absnum)) {                                    $db->query("insert into axapta_related set absnum='".$absnum."', child_absnum='".$rel_absnum."'");                                }                            }                        }}function lib_update_props_product(&$db,&$props,&$props_types,$axapta_code,$page_absnum,$absnum) {                    if (!empty($props[$axapta_code])) {                        $db->query("delete from axapta_props where absnum={absnum} and page_absnum={page_absnum}",array('absnum'=>$absnum,'page_absnum'=>$page_absnum));                        foreach($props[$axapta_code] as $p) {                            $db->query("replace into axapta_props set absnum={absnum}, prop_id={prop}, value_id={val}, page_absnum={page_absnum},filter={filter},attribute={attribute}",array('absnum'=>$absnum, 'val'=>$p['value'], 'prop'=>$p['attr'],'page_absnum'=>$page_absnum,'filter'=>$props_types[$p['attr']]['filter'],'attribute'=>$props_types[$p['attr']]['attribute']));                        }                    }}function lib_update_files(&$db,&$axapta,&$files,$absnum) {   if (count($files)>0) {       $db->query('delete from axapta_files where absnum={absnum} AND `type` IN (\'cert\',\'doc\') ', array('absnum'=>$absnum));                        foreach ($files as $key => $fl) {                            $file = '/user/import/'.$fl['file'];                            $ext  = explode('.', $file);                            if ( count($ext) > 1 && !empty($ext[count($ext)-1]) ) {									    $ext = $ext[count($ext)-1];									 } else {									    $ext = 'pdf'; }                            $alias = prepare_alias_file($fl['name'], 1) .'.'. $ext;                                                        if ($fl['type']=='Сертификат') {                                $type = 'cert';                            } else {                                $type = 'doc';                                copy($_SERVER['DOCUMENT_ROOT'].$file, $_SERVER['DOCUMENT_ROOT'].'/user/files/'.$alias); // +++++++++++++++++++++++++++++++++++++++                                $file = '/user/files/'.$alias;                            }                            $db->query("insert into axapta_files set absnum={absnum}, `file`={file}, `type`={type}, `name`={name},`alias`={alias}",array('absnum'=>$absnum, 'file'=>$file, 'type'=>$type, 'name'=>$fl['name'],'alias'=>$alias));                        }    } else {       $db->query("delete from axapta_files where absnum={absnum}", array('absnum'=>$absnum));    }}function lib_update_descr($db,$axapta,$files,$absnum,$axapta_code) {    foreach ($files as $key => $val) {        if (1) { // ($val['new']) { // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                $file = '/user/import/'.$val['file'];        if (file_exists(ROOT.'/user/cache'.$file)) {		     $response = file_get_contents(ROOT.'/user/cache'.$file);		  } else {           $e   = explode('/',$file);    $fname = $e[count($e)-1];           $ext = explode('.',$fname);   $ext = $ext[count($ext)-1];              if ($ext == 'htm' || $ext == 'html') {   		     $response = file_get_contents(ROOT.$file);   		     $response = iconv("CP1251", "UTF-8", $response);   		     $response = str_replace(array("\n","\r"), ' ', $response);   		  } else {   		     $response = ''; }                      if ($response!='error') {               preg_match_all('#<body.*?'.'>(.*)</body>#ui', $response, $m);               $response = $m[1][0];               $response = preg_replace('#<FONT.*?'.'>#ui',     '',  $response);               $response = preg_replace('#</FONT>#ui',          '',  $response);               $response = preg_replace('#\sCLASS\=.*?'.'>#ui', '>', $response);               $response = preg_replace('#<P><BR>\s</P>#ui',    '',  $response);               $response = preg_replace('#<P><BR></P>#ui',      '',  $response);               $response = str_replace(array('<o:p>','</o:p>',  ' lang=EN-US', ' lang=UK'), '', $response);           } else {               $response = ''; }           file_put_contents(ROOT.'/user/cache'.$file, $response); // ++++++++++++++++++++++++++++++++++++++++        }        $lang = '';        if ($val['type'] == 'Описание') $lang = " and langid='1'";        else if ($val['type'] == 'ОписаниеUA') $lang = " and langid='2'";        else if ($val['type'] == 'ОписаниеEN') $lang = " and langid='3'";                if ($response) {            $db->query("update `articles` set `body`='".mysql_real_escape_string($response)."' where `absnum`=$absnum $lang "); }                    }    }}function lib_update_images(&$db,&$axapta,&$files,&$absnum,&$axapta_code) {    foreach ($files as $key => $val) {		 $pos = $key+1;       $file = ROOT.'/user/import/'.$val['file'];	 	 if ($pos==1) {		     $path   = ROOT.'/img/article/'.intval($absnum/100);		     if(!is_dir($path)) mkdir($path,0777,true);                         if ($val['new']) {		         $irs = getimagesize($file); 		         $localpath = $path.'/'.($absnum%100).'_main.jpg'; // ------------		         @unlink($localpath);		        	convert_avatar_2($file,$irs,$cmd,$localpath,189,189); // ++++++++++++++++++++++++++++++++++++++++++++++++++++		         $localpath = $path.'/'.($absnum%100).'_tn.jpg'; // --------------		         @unlink($localpath);		        	convert_avatar_2($file,$irs,$cmd,$localpath,180,138); // +++++++++++++++++++++++++++++++++++++++++++++++++++++		    	   $localpath = $path.'/'.($absnum%100).'_tn_slider.jpg'; // -------		    	   @unlink($localpath);	        	   convert_avatar_2($file,$irs,$cmd,$localpath,60,60); // +++++++++++++++++++++++++++++++++++++++++++++++++++++++            }	    } else {			   $irs = getimagesize($file);		 }	    $galnum = $db->qsingle("select absnum from articles_gallery where parent={absnum} and position={pos}",array(	    		'absnum' => $absnum,	    		'pos'    => $pos ));	     if (empty($galnum)) {	    		$galnum = $db->nextid('articles_gallery');	    		$db->query("insert into articles_gallery set absnum={galnum},parent={absnum},position={pos}",array(	    			'absnum' => $absnum,	    			'pos'    => $pos,	    			'galnum' => $galnum	    		));	     }                $path   = ROOT."/img/gallery/".intval($absnum/100);		  if (!is_dir($path)) {		      mkdir($path, 0777); }		  if (!is_dir($path."/".intval($absnum%100))) {		      mkdir($path."/".intval($absnum%100), 0777); }        if ($val['new']) {		      $localpath = $path."/".intval($absnum%100)."/".$galnum."_main.jpg";         	copy($file,$localpath); // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	    	   $localpath = $path."/".intval($absnum%100)."/".$galnum."_tn.jpg";	        	convert_avatar_2($file,$irs,$cmd,$localpath,59,59); // ++++++++++++++++++++++++++++++++++++++	     }    }}function lib_update_prices(&$db,&$axapta,&$prices,&$absnum,&$axapta_code,$price_id=1) {    $currencys = array('UA'=>1,'USD'=>3,'UAH'=>2); // Список валют    //$price_id = 1; // Розница        if (count($prices)) {       foreach ($prices[$axapta_code] AS $currency=>$price) {			 for ($j=1; $j<=3; $j++) {			    $query = "INSERT INTO `cont_2130` SET 				              `absnum`=$absnum, 								  `model`=$price_id, 								  `langid`=$j, 								  `price_group`=$price_id, 								  `amount`=$price, 								  `currency`=". $currencys[$currency] .", 								  `updated`=1 							  ON DUPLICATE KEY UPDATE 								  `amount`=$price,								  `updated`=1 "; //				 //file_put_contents('/var/www/php_echo/import_sas1.txt', "\n". $query .";\n", FILE_APPEND );			    $db->query( $query ); /*, array(				     'absnum'=>$absnum,					  'key'=>$price_id,					  'langid'=>$j,					  'price'=>$price,					  'currency'=>$currencys[$currency]) ); //*/								//file_put_contents('/var/www/php_echo/import_sas1.txt', 'bbbbbbbbb'. mysql_error(), FILE_APPEND );				/*				 file_put_contents('/var/www/php_echo/import_sas1.txt', "\n\n INSERT INTO `cont_2130` SET 				              `absnum`={$absnum}, 								  `model`={$price_id}, 								  `langid`={$j}, 								  `price_group`={$price_id}, 								  `amount`={$price}, 								  `currency`=".$currencys[$currency].", 								  `updated`=1 							  ON DUPLICATE KEY UPDATE 								  `amount`={$price},								  `updated`=1  \n\n",FILE_APPEND);//*/			 }			 //file_put_contents('/var/www/php_echo/import_sas1.txt', "\n\n [$price_id] [$price] $axapta_code \n\n",FILE_APPEND);	    }    } else {       //file_put_contents('/var/www/php_echo/import_sas1.txt', "\n\n Net Price [$axapta_code] ++++++++++++++ \n\n [$price_id] ($price_name) $axapta_code \n\n",FILE_APPEND);       // echo "\n\n Net Price [$axapta_code] ++++++++++++++ \n\n ";       $db->query(' delete from `cont_2130` where `absnum`={absnum} AND `price_group`={price_id} ', array('absnum'=>$absnum, 'price_id'=>$price_id));    }}function lib_update_pricelists(&$db,&$price_groups) {   $out = array();	foreach ($price_groups as $group) {        $key = $db->qsingle("select absnum from axapta_prices where name={name}",array(            'name'   => $group        ));        if (empty($key)) {            $key = $db->nextId("axapta_prices");                        $db->query("insert into axapta_prices set absnum={absnum}, name={name}",array(                'absnum' => $key,                'name'   => $group            ));        }      $out[$key] = $group;   }   return $out;}function create_text_article($category,$title,$header,$body,$active, $absnum, $adate) {    global $db;        $pos = $db->qsingle("select max(position) as pos from articles where category='".$category."'");    $pos++;    $alias = prepare_alias($title,$absnum);    for($i=1;$i<=3;$i++) {    $db->query("        insert into articles         set absnum='".$absnum."',            title='".mysql_real_escape_string($title)."',            alias='".$alias."-".$absnum."',            langid='".$i."',            body='".mysql_real_escape_string($body)."',            header='".mysql_real_escape_string($header)."',            position='".$pos."',            category='".$category."',            created='".time()."',            approved='".$active."',            adate='".$adate."',            userid='1'    ");    }        $db->query("update pages set acnt=acnt+1,acnt_total=acnt_total+1 where absnum='".$category."'");    return $absnum;}function create_article($category,$title,$header,$axapta_code,$active,$brand,$adate=0,$axapta_alias='',$approved=1,$article=null) {    global $db;        $absnum = $db->nextid('articles');    $pos = $db->qsingle("select max(position) as pos from articles where category='".$category."'");    $pos++;    $alias = prepare_alias($title,$absnum);    $title = mysql_real_escape_string($title);    $header = mysql_real_escape_string($header);    $axapta_alias = mysql_real_escape_string($axapta_alias);    for($i=1;$i<=3;$i++) {      $db->query("          insert into articles           set absnum='".$absnum."',              title='".$title."',              alias='".$alias."-".$absnum."',              langid='".$i."',              axapta_code='".$axapta_code."',              header='".$header."',              position='".$pos."',              category='".$category."',              created='".$adate."',              adate='".$adate."',              approved='".$approved."',              avail='".$active."',              axapta_article='".$article."',              brand='".$brand."',              axapta_alias='".$axapta_alias."',              axapta_updated=1,              userid='1'      ");    }        $db->query("update pages set acnt=acnt+1,acnt_total=acnt_total+1 where absnum='".$category."'");    return $absnum;}function save_image($absnum, $img, $type='main',$where='section',$id=0) {    $ext = explode('.',$img);    $ext = $ext[count($ext)-1];    $img_data = file_get_contents($img);    if ($img_data) {        if ($where<>'gallery') {            if (!file_exists($_SERVER['DOCUMENT_ROOT'].'/img/'.$where.'/'.intval($absnum/100).'/')) {                mkdir($_SERVER['DOCUMENT_ROOT'].'/img/'.$where.'/'.intval($absnum/100).'/',0777,true);            }                                  $file = $_SERVER['DOCUMENT_ROOT'].'/img/'.$where.'/'.intval($absnum/100).'/'.intval($absnum%100).'_'.$type.'.'.$ext;        } else {            if(!file_exists($_SERVER['DOCUMENT_ROOT']."/img/".$where."/".intval($absnum/100)."/".intval($absnum%100).'/')) {                mkdir($_SERVER['DOCUMENT_ROOT']."/img/".$where."/".intval($absnum/100)."/".intval($absnum%100), 0777,true);            }            $file = $_SERVER['DOCUMENT_ROOT']."/img/".$where."/".intval($absnum/100)."/".intval($absnum%100).'/'.$id.'_'.$type.'.'.$ext;        }        file_put_contents($file,$img_data);        return $file;    } else {        return false;    }}function prepare_alias($alias, $absnum){    $valid="/[^a-z0-9\-]/";        $title  = str_replace(array("&quot;","&lquot;","&rquot;","&laquo;","&raquo;"),"",$alias);    $tr     = array(        "А" => "a",  "Б" => "b",   "В" => "v",  "Г" => "g",   "И" => "i",        "Д" => "d",  "Е" => "e",   "Ж" => "j",  "З" => "z",   "я" => "ya",        "Й" => "y",  "К" => "k",   "Л" => "l",  "М" => "m",   "Н" => "n",        "О" => "o",  "П" => "p",   "Р" => "r",  "С" => "s",   "Т" => "t",        "У" => "u",  "Ф" => "f",   "Х" => "h",  "Ц" => "C",  "Ч" => "ch",        "Ш" => "sh", "Щ" => "sch", "Ъ" => "",   "Ы" => "y",  "Ь" => "",        "Э" => "e",  "Ю" => "yu",  "Я" => "ya", "а" => "a",   "б" => "b",        "в" => "v",  "г" => "g",   "д" => "d",  "е" => "e",   "ж" => "j",        "з" => "z",  "и" => "i",   "й" => "y",  "к" => "k",   "л" => "l",        "м" => "m",  "н" => "n",   "о" => "o",  "п" => "p",   "р" => "r",        "с" => "s",  "т" => "t",   "у" => "u",  "ф" => "f",   "х" => "h",        "ц" => "c",  "ч" => "ch",  "ш" => "sh", "щ" => "sch", "ъ" => "y",        "ы" => "y", "ь" => "",    "э" => "e",  "ю" => "yu",  " " => "-",         "Ё" => "jo", "ё" => "jo",  "і" => "i",  "І" => "i",   "." => "",        "/" => "-",  "Є" => "e",   "є" => "e"    );    $title  = strtr($title,$tr);    $title  = strtolower($title);    $title  = preg_replace("/\(.*\)/","",$title);    $title  = preg_replace($valid,"",$title);    $title  = preg_replace("/\-{2,100}/","-",$title);        if (strlen($title)>30) {        $title  = substr($title,0,30);        $t      = explode('-',$title);        unset($t[count($t)-1]);        $title  = join('-',$t);    }        $title  = trim($title,'-');    $title  = trim($title."-".$absnum);    	return $title;}function prepare_alias_file($alias){    $valid="/[^a-z0-9\-]/";        $title  = str_replace(array("&quot;","&lquot;","&rquot;","&laquo;","&raquo;"),"",$alias);    $tr     = array(        "А" => "a",  "Б" => "b",   "В" => "v",  "Г" => "g",   "И" => "i",        "Д" => "d",  "Е" => "e",   "Ж" => "j",  "З" => "z",   "я" => "ya",        "Й" => "y",  "К" => "k",   "Л" => "l",  "М" => "m",   "Н" => "n",        "О" => "o",  "П" => "p",   "Р" => "r",  "С" => "s",   "Т" => "t",        "У" => "u",  "Ф" => "f",   "Х" => "h",  "Ц" => "C",  "Ч" => "ch",        "Ш" => "sh", "Щ" => "sch", "Ъ" => "",   "Ы" => "y",  "Ь" => "",        "Э" => "e",  "Ю" => "yu",  "Я" => "ya", "а" => "a",   "б" => "b",        "в" => "v",  "г" => "g",   "д" => "d",  "е" => "e",   "ж" => "j",        "з" => "z",  "и" => "i",   "й" => "y",  "к" => "k",   "л" => "l",        "м" => "m",  "н" => "n",   "о" => "o",  "п" => "p",   "р" => "r",        "с" => "s",  "т" => "t",   "у" => "u",  "ф" => "f",   "х" => "h",        "ц" => "c",  "ч" => "ch",  "ш" => "sh", "щ" => "sch", "ъ" => "y",        "ы" => "y", "ь" => "",    "э" => "e",  "ю" => "yu",  " " => "-",         "Ё" => "jo", "ё" => "jo",  "і" => "i",  "І" => "i",   "." => "",        "/" => "-",  "Є" => "e",   "є" => "e"    );    $title  = strtr($title,$tr);    $title  = strtolower($title);    $title  = preg_replace("/\(.*\)/","",$title);    $title  = preg_replace($valid,"",$title);    $title  = preg_replace("/\-{2,100}/","-",$title);    $title  = trim($title,'-');      return $title;}function resz_2($width,$height,$isz) {    global $test;    $irs = array();    if($isz[0]>$isz[1]){        $irs[0] = $isz[0]/($isz[1]/$height);        $irs[1]    = $height;    }else{        $irs[0] = $width;        $irs[1]    = $isz[1]/($isz[0]/$width);    }    return $irs;}function convert_avatar_2($filename_tmp,$irs,$cmd,$filename,$width,$height){    global $show_debug, $db_execute;        if($irs[0] > $width || $irs[1] > $height) {                $irs = resz_2($width,$height,$irs);        /*        // resize        $z = SUNSITE_IM_PATH."convert -debug exception ".$filename_tmp."  -quality 90 -coalesce ".((round($irs[0]+0)>=round($width)||round($irs[1]+0)>=round($height))?"-resize ".round($irs[0]+0)."x".round($irs[1]+0):"")."  $cmd ".$filename;        //convert SP-PR-PN-HLJ2420.jpg -resize 160x138 -background white -compose Copy -gravity center -extent 180x138 -quality 90 rez.jpg                //echo $z."<br><br />";        passthru($z, $ret);                // crop        $z = SUNSITE_IM_PATH."convert -debug exception ".$filename."  -quality 90 -gravity Center -crop ".round($width)."x".round($height)."+0+0 $cmd ".$filename;        //echo $z."<br><br />";        passthru($z, $ret);        */        $z = SUNSITE_IM_PATH."convert ".$filename_tmp." -resize ".round($width)."x".round($height)." -background white -compose Copy -gravity center -extent ".round($width)."x".round($height)." -quality 90 ".$filename;        passthru($z, $ret);        //echo "[[".$z."]]\n";    } else if ($irs[0]>=160 && $irs[0]>=138) {                //echo $filename_tmp,' - ',$filename."<br><br />";        copy($filename_tmp,$filename);            }}function odt2text($filename) {    return getTextFromZippedXML($filename, "content.xml");}function docx2text($filename) {    return getTextFromZippedXML($filename, "word/document.xml");}function getTextFromZippedXML($archiveFile, $contentFile) {    // Создаёт "реинкарнацию" zip-архива...    $zip = new ZipArchive;    // И пытаемся открыть переданный zip-файл    if ($zip->open($archiveFile)) {        // В случае успеха ищем в архиве файл с данными        if (($index = $zip->locateName($contentFile)) !== false) {            // Если находим, то читаем его в строку            $content = $zip->getFromIndex($index);            // Закрываем zip-архив, он нам больше не нужен            $zip->close();             // После этого подгружаем все entity и по возможности include'ы других файлов            // Проглатываем ошибки и предупреждения            $xml = DOMDocument::loadXML($content, LIBXML_NOENT | LIBXML_XINCLUDE | LIBXML_NOERROR | LIBXML_NOWARNING);            // После чего возвращаем данные без XML-тегов форматирования            $str = $xml->saveXML();           //echo $str."<br/>";           $str = str_replace('<w:br/>', '<br>', $str);           $str = strip_tags($str,"<br>");//<w:hyperlink r:id="rId3"><w:r><w:rPr><w:rStyle w:val="style16"/><w:rFonts w:ascii="Tahoma" w:cs="Tahoma" w:eastAsia="Times New Roman" w:hAnsi="Tahoma"/><w:color w:val="0000FF"/><w:sz w:val="20"/><w:szCs w:val="20"/><w:u w:val="single"/><w:lang w:eastAsia="ru-RU"/></w:rPr><w:t>фильтр тонкой очистки HEPA</w:t></w:r></w:hyperlink>           return $str;        }        $zip->close();    }    // Если что-то пошло не так, возвращаем пустую строку    return "";}function sendMailWL($data) {   //global $phrase;        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) return false;           $s            = new sendemail();        $s->subject   = 'Ожидаемый Вами товар доступен в личном кабинете';        $s->mail_to   = $data['email'];        $s->name_to   = $data['name'];        $s->mail_from = 'info@patronservice.ua';        $s->name_from = 'Патрон Сервис';        $s->body      = "<p style=\"font-family: Tahoma; font-size: 10pt;\">Здравствуйте!<br /><br />Благодарим за интерес к нашей продукции!<br /><br />Рады сообщить, что ожидаемая Вами позиция ". $data['produkt'] ." доступна для заказа в личном кабинете http://www.patronservice.ua/profile.html. <br /><br />Ждем Ваш заказ.<br /><br />С наилучшими пожеланиями , <b>Патрон Сервис</b><br />пишите: info@patronservice.com.ua<br />звоните: (044) 379-09-09<br />присылайте факс: (044) 379-04-03<br />www.patronservice.ua<br /></p>		  ";                $s->Send();}function lib_convertPhone($phone) {   $phone = preg_replace('/[^0-9]/', '', trim($phone)); // (066)267-54-62   if (strlen($phone)<1 ) { return false; }   if (strlen($phone)<10) { $phone = str_repeat('0', 10-strlen($phone)) . $phone; }   if (strlen($phone)>10) { $phone = substr($phone, -10, 10); }   $phone = "(".substr($phone, 0,3).")".substr($phone, 3,3)."-".substr($phone, 6,2)."-".substr($phone, 8,2);   return $phone;}function lib_sendMailError($data,$mlt='webadmin@vm.ua') {   $s            = new sendemail();   $s->subject   = $data['subject'];   $s->mail_to   = $mlt;  // 'internetshop@vm.ua';   $s->name_to   = "Admin";   $s->mail_from = 'noreply@patronservice.ua';   $s->name_from = 'patronservice';   $s->body      = $data['body'];   $s->Send();}function lib_sendMailErrorList($data) {   foreach ($data['mail_to'] as $mlt) {      lib_sendMailError($data,$mlt);   }}function SEO_cyr2lat($cyr) {        $cyr = mb_strtolower($cyr, 'UTF-8');                $cyr2lat = array(        'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'jo', 'ж' => 'zh',        'з' => 'z', 'и' => 'i', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o',        'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c',        'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shh', 'ь' => '', 'ы' => 'y', 'ъ' => '', 'э' => 'e', 'ю' => 'ju',        'я' => 'ja', ' ' => '-', 'a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' => 'f',        'g' => 'g', 'h' => 'h', 'i' => 'i', 'j' => 'j', 'k' => 'k', 'l' => 'l', 'm' => 'm', 'n' => 'n',        'o' => 'o', 'p' => 'p', 'q' => 'q', 'r' => 'r', 's' => 's', 't' => 't', 'u' => 'u', 'v' => 'v',        'w' => 'w', 'x' => 'x', 'y' => 'y', 'z' => 'z', '0' => '0', '1' => '1', '2' => '2', '3' => '3',        '4' => '4', '5' => '5', '6' => '6', '7' => '7', '8' => '8', '9' => '9', '-' => '-', '(' =>  '-',        ')' => '-', ':' => '-', '.' => '-', ';' => '-', '_' => '-', '\'' => '-', '"' => '-'        );        $i=0;        $result = NULL;                while ($i < mb_strlen($cyr, 'UTF-8')){            $str = mb_substr($cyr, $i, 1, 'UTF-8');            if (isset($cyr2lat[$str])){                $result .= $cyr2lat[$str];            }            $i++;        }        return str_replace('--', '-', $result);    }